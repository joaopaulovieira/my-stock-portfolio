{"version":3,"file":"my-stock-portfolio.min.js","sources":["../src/my-portfolio-stock.js"],"sourcesContent":["export default class MyStockPortfolio {\n    get portfolioDistribution() { return this._portfolioDistribution }\n    set portfolioDistribution(distribution) { this._portfolioDistribution = distribution }\n\n    constructor(rawOperations) {\n        this.operationsRegister = this.insertAdditionalMetadata(rawOperations)\n\n        this.buyActions = this.consolidateActions(this.operationsRegister.filter(item => item.action === 'buy'))\n        this.sellActions = this.consolidateActions(this.operationsRegister.filter(item => item.action === 'sell'))\n\n        this.positions = this.removeSoldPositions(this.buyActions)\n    }\n\n    normalizeToNumber(string) { return +(string).toFixed(2) }\n\n    insertAdditionalMetadata(rawOperations) {\n        const updatedOperations = JSON.parse(JSON.stringify(rawOperations))\n        let id = 0\n        \n        updatedOperations.forEach(operation => (operation.id = ++id))\n        return updatedOperations\n    }\n\n    removeSoldPositions(positions) {\n        const updatedPositions = JSON.parse(JSON.stringify(positions))\n    \n        this.sellActions.forEach(sell => {\n            updatedPositions.forEach(buy => {\n                if (buy.name === sell.name) {\n                    buy.quantity -= sell.quantity\n                    buy.totalValue = this.normalizeToNumber(buy.unitaryValue * buy.quantity)\n                }\n            })\n        })\n\n        return updatedPositions.filter(item => item.quantity !== 0)\n    }\n\n    consolidateActions(actions) {\n        let actionsCopy = JSON.parse(JSON.stringify(actions))\n        let mergedItems = []\n    \n        actionsCopy.forEach(action => {  \n            if (mergedItems.some(item => item.name === action.name)) return\n\n            let consolidated = actionsCopy.reduce((accumulator, action) => {\n                if (accumulator.id !== action.id && accumulator.name === action.name) {\n                    actionsCopy = actionsCopy.filter(element => element.id !== accumulator.id && element.id !== action.id)\n                    return { \n                        id: action.id,\n                        name: accumulator.name,\n                        quantity: accumulator.quantity + action.quantity,\n                        unitaryValue: this.normalizeToNumber((accumulator.unitaryValue + action.unitaryValue)/2),\n                        totalValue: this.normalizeToNumber((accumulator.quantity + action.quantity) * this.normalizeToNumber((accumulator.unitaryValue + action.unitaryValue)/2)),\n                    }\n                }\n                return {\n                    id: accumulator.id,\n                    name: accumulator.name,\n                    quantity: accumulator.quantity,\n                    unitaryValue: accumulator.unitaryValue,\n                    totalValue: this.normalizeToNumber(accumulator.unitaryValue * accumulator.quantity)\n                }\n            }, action)\n\n            mergedItems.push(consolidated)\n        })\n\n        return mergedItems\n    }\n\n    distributionForNewInvestment(value, distribution = this.portfolioDistribution) {\n        if (!distribution) return console.error(`No distribution parameter is received. Please, inform one distribution when calling this method or set a default distribution for this portfolio.`)\n        distribution.forEach(item => console.log(`${item.name} - ${((value * item.percentile)/100).toFixed(2)}`))\n    }\n\n    totalValueInvested() {\n        if (this.positions.length === 1) return this.positions[0].totalValue\n        const totalValueInvested = this.positions.reduce((accumulator, position) => {\n            return typeof accumulator === 'number'\n                ? this.normalizeToNumber(accumulator + position.totalValue)\n                : this.normalizeToNumber(accumulator.totalValue + position.totalValue)\n        })\n        return totalValueInvested\n    }\n\n    actualDistribution() {\n        const totalInvested = this.totalValueInvested()\n        console.log(`total: ${totalInvested}`)\n        this.positions.forEach(position => console.log(`${position.name} - ${position.totalValue} -  ${((position.totalValue/totalInvested)*100).toFixed(2)}%`))\n    }\n\n    totalBalance() {\n        let balance = 0\n        let purchasedPositionsCopy = JSON.parse(JSON.stringify(this.buyActions))\n\n        this.sellActions.forEach(action => {\n            purchasedPositionsCopy.forEach(item => {\n                item.name === action.name && (balance += this.normalizeToNumber(action.quantity * (action.unitaryValue - item.unitaryValue)))\n                purchasedPositionsCopy = purchasedPositionsCopy.filter(item => item.quantity !== 0)\n            })\n        })\n\n        return balance\n    }\n}\n"],"names":["this","_portfolioDistribution","distribution","constructor","rawOperations","operationsRegister","insertAdditionalMetadata","buyActions","consolidateActions","filter","item","action","sellActions","positions","removeSoldPositions","normalizeToNumber","string","toFixed","updatedOperations","JSON","parse","stringify","id","forEach","operation","updatedPositions","sell","buy","name","quantity","totalValue","unitaryValue","actions","actionsCopy","mergedItems","some","consolidated","reduce","accumulator","element","push","distributionForNewInvestment","value","portfolioDistribution","console","error","log","percentile","totalValueInvested","length","position","actualDistribution","totalInvested","totalBalance","balance","purchasedPositionsCopy"],"mappings":"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"}