!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?module.exports=i():"function"==typeof define&&define.amd?define(i):(t=t||self).MyStockPortfolio=i()}(this,(function(){"use strict";return class{get portfolioDistribution(){return this._portfolioDistribution}set portfolioDistribution(t){this._portfolioDistribution=t}constructor(t){this.operationsRegister=this.insertAdditionalMetadata(t),this.buyActions=this.consolidateActions(this.operationsRegister.filter(t=>"buy"===t.action)),this.sellActions=this.consolidateActions(this.operationsRegister.filter(t=>"sell"===t.action)),this.positions=this.removeSoldPositions(this.buyActions)}normalizeToNumber(t){return+t.toFixed(2)}insertAdditionalMetadata(t){const i=JSON.parse(JSON.stringify(t));let e=0;return i.forEach(t=>t.id=++e),i}removeSoldPositions(t){const i=JSON.parse(JSON.stringify(t));return this.sellActions.forEach(t=>{i.forEach(i=>{i.name===t.name&&(i.quantity-=t.quantity,i.totalValue=this.normalizeToNumber(i.unitaryValue*i.quantity))})}),i.filter(t=>0!==t.quantity)}consolidateActions(t){let i=JSON.parse(JSON.stringify(t)),e=[];return i.forEach(t=>{if(e.some(i=>i.name===t.name))return;let o=i.reduce((t,e)=>t.id!==e.id&&t.name===e.name?(i=i.filter(i=>i.id!==t.id&&i.id!==e.id),{id:e.id,name:t.name,quantity:t.quantity+e.quantity,unitaryValue:this.normalizeToNumber((t.unitaryValue+e.unitaryValue)/2),totalValue:this.normalizeToNumber((t.quantity+e.quantity)*this.normalizeToNumber((t.unitaryValue+e.unitaryValue)/2))}):{id:t.id,name:t.name,quantity:t.quantity,unitaryValue:t.unitaryValue,totalValue:this.normalizeToNumber(t.unitaryValue*t.quantity)},t);e.push(o)}),e}distributionForNewInvestment(t,i=this.portfolioDistribution){if(!i)return console.error("No distribution parameter is received. Please, inform one distribution when calling this method or set a default distribution for this portfolio.");i.forEach(i=>console.log(`${i.name} - ${(t*i.percentile/100).toFixed(2)}`))}totalValueInvested(){if(1===this.positions.length)return this.positions[0].totalValue;return this.positions.reduce((t,i)=>"number"==typeof t?this.normalizeToNumber(t+i.totalValue):this.normalizeToNumber(t.totalValue+i.totalValue))}actualDistribution(){const t=this.totalValueInvested();console.log("total: "+t),this.positions.forEach(i=>console.log(`${i.name} - ${i.totalValue} -  ${(i.totalValue/t*100).toFixed(2)}%`))}totalBalance(){let t=0,i=JSON.parse(JSON.stringify(this.buyActions));return this.sellActions.forEach(e=>{i.forEach(o=>{o.name===e.name&&(t+=this.normalizeToNumber(e.quantity*(e.unitaryValue-o.unitaryValue))),i=i.filter(t=>0!==t.quantity)})}),t}}}));
//# sourceMappingURL=my-stock-portfolio.min.js.map
